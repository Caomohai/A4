import socket
import sys
import base64
import os

class UDPClient:
    def __init__(self, host, port, file_list):
        self.server_host = host
        self.server_port = port
        self.file_list = file_list
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.settimeout(1.0)  # Initial timeout of 1 second

    def send_and_receive(self, message, address, max_retries=5):
        current_timeout = 1.0
        retries = 0
        
        while retries < max_retries:
            try:
                self.socket.sendto(message.encode(), address)
                self.socket.settimeout(current_timeout)
                response, _ = self.socket.recvfrom(1024)
                return response.decode()
            except socket.timeout:
                retries += 1
                current_timeout *= 2
                print(f"Timeout, retrying ({retries}/{max_retries})...")
                
        raise Exception("Max retries reached, giving up")

    def download_file(self, filename):
        print(f"Requesting {filename}...", end='', flush=True)
        
        # Step 1: Request download
        try:
            response = self.send_and_receive(
                f"DOWNLOAD {filename}", 
                (self.server_host, self.server_port)
            )
        except Exception as e:
            print(f"\nFailed to download {filename}: {e}")
            return False
            
        parts = response.split()
        if parts[0] == "ERR":
            print(f"\nError: {response}")
            return False
            
        # Parse OK response
        file_size = int(parts[4])
        port = int(parts[6])
        print(f" OK, size: {file_size} bytes")
        
        # Step 2: Download chunks
        try:
            with open(filename, 'wb') as file:
                bytes_received = 0
                while bytes_received < file_size:
                    start = bytes_received
                    end = min(start + 999, file_size - 1)
                    
                    try:
                        response = self.send_and_receive(
                            f"FILE {filename} GET START {start} END {end}",
                            (self.server_host, port)
                        )
                    except Exception as e:
                        print(f"\nFailed to download chunk: {e}")
                        return False
                        
                    # Parse data response
                    resp_parts = response.split()
                    if resp_parts[0] != "FILE" or resp_parts[2] != "OK":
                        print("\nInvalid response format")
                        return False
                        
                    data_start = int(resp_parts[4])
                    data_end = int(resp_parts[6])
                    data_payload = ' '.join(resp_parts[8:])
                    chunk = base64.b64decode(data_payload)
                    
                    file.seek(data_start)
                    file.write(chunk)
                    bytes_received += len(chunk)
                    print('*', end='', flush=True)
                
                # Finalize transfer
                try:
                    response = self.send_and_receive(
                        f"FILE {filename} CLOSE",
                        (self.server_host, port)
                    )
                    if response.strip() != f"FILE {filename} CLOSE_OK":
                        print("\nClose confirmation failed")
                        return False
                except Exception as e:
                    print(f"\nFailed to close: {e}")
                    return False
                    
            print("\nDownload complete!")
            return True
            
        except Exception as e:
            print(f"\nError during download: {e}")
            if os.path.exists(filename):
                os.remove(filename)
            return False

    def run(self):
        try:
            with open(self.file_list, 'r') as f:
                files = [line.strip() for line in f if line.strip()]
                
            for filename in files:
                self.download_file(filename)
                
        except FileNotFoundError:
            print(f"Error: File list '{self.file_list}' not found")
        except Exception as e:
            print(f"Error: {e}")
        finally:
            self.socket.close()

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python3 UDPclient.py <host> <port> <file_list>")
        sys.exit(1)
        
    host = sys.argv[1]
    port = int(sys.argv[2])
    file_list = sys.argv[3]
    
    client = UDPClient(host, port, file_list)
    client.run()