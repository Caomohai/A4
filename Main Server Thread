import socket
import threading
import random
import os
import base64

class UDServer:
    def __init__(self,port):
        self.welcome_socket = socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.welcome_socket.bind(('',port))
        print(f"Server listening on port {port}")

    def start(self):
        while True:
            data, client_address = self.welcome_socket.recvfrom(1024)
            message = data.decode().strip()
            parts = message.split()    

            if len(parts) < 2 or parts[0] != "DOWNLOAD":
                continue

            filename = parts[1]
            if not os.path.exists(filename):
                response = f"ERR {filename} NOT_FOUND"
                self.welcome_socket.sendto(response.encode(), client_address)
            else:
                file_size = os.path.getsize(filename)
                port = random.randint(50000, 51000)
                response = f"OK {filename} SIZE {file_size} PORT {port}"
                self.welcome_socket.sendto(response.encode(), client_address)
                
                threading.Thread(target=self.handle_file_transfer, 
                               args=(filename, client_address, port)).start()    
    def handle_file_transfer(self, filename, client_address, port):
        try:
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            client_socket.bind(('', port))
            
            with open(filename, 'rb') as file:
                while True:
                    data, addr = client_socket.recvfrom(1024)  
                    message = data.decode().strip()
                    parts = message.split()
                    
                    if parts[0] == "FILE" and parts[2] == "CLOSE":
                        client_socket.sendto(f"FILE {filename} CLOSE_OK".encode(), addr)
                        break

                    if parts[0] == "FILE" and parts[2] == "GET":
                        start = int(parts[4])
                        end = int(parts[6])
                        file.seek(start)
                        chunk = file.read(end - start + 1)
                        encoded = base64.b64encode(chunk).decode()
                        response = f"FILE {filename} OK START {start} END {end} DATA {encoded}"
                        client_socket.sendto(response.encode(), addr)      

        finally:
            client_socket.close()

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: python3 UDPserver.py <port>")
        sys.exit(1)
        
    port = int(sys.argv[1])
    server = UDPServer(port)
    server.start()                    
